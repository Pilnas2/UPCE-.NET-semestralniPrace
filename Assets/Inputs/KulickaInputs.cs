//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Inputs/KulickaControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Kulicka.Input
{
    public partial class @KulickaInputs: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @KulickaInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""KulickaControls"",
    ""maps"": [
        {
            ""name"": ""Kulicka Ovladani"",
            ""id"": ""8103c005-9dc8-4cad-8442-427e372ce57c"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Value"",
                    ""id"": ""66ac7509-dc3b-499e-92a8-522a9d57243c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d13d191b-b9a8-47eb-8686-db700a574a48"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f522bd1e-cb69-4dc7-ba6f-f11c9078ff86"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2e74f129-8dbe-4bfa-b4b1-2718c636245b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ad7d82cd-cb72-436c-b83e-eb5f66340049"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6e18d5d5-3c22-43e7-9ffb-12a578bb01ca"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Kulicka Ovladani
            m_KulickaOvladani = asset.FindActionMap("Kulicka Ovladani", throwIfNotFound: true);
            m_KulickaOvladani_Newaction = m_KulickaOvladani.FindAction("New action", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Kulicka Ovladani
        private readonly InputActionMap m_KulickaOvladani;
        private List<IKulickaOvladaniActions> m_KulickaOvladaniActionsCallbackInterfaces = new List<IKulickaOvladaniActions>();
        private readonly InputAction m_KulickaOvladani_Newaction;
        public struct KulickaOvladaniActions
        {
            private @KulickaInputs m_Wrapper;
            public KulickaOvladaniActions(@KulickaInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_KulickaOvladani_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_KulickaOvladani; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KulickaOvladaniActions set) { return set.Get(); }
            public void AddCallbacks(IKulickaOvladaniActions instance)
            {
                if (instance == null || m_Wrapper.m_KulickaOvladaniActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_KulickaOvladaniActionsCallbackInterfaces.Add(instance);
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }

            private void UnregisterCallbacks(IKulickaOvladaniActions instance)
            {
                @Newaction.started -= instance.OnNewaction;
                @Newaction.performed -= instance.OnNewaction;
                @Newaction.canceled -= instance.OnNewaction;
            }

            public void RemoveCallbacks(IKulickaOvladaniActions instance)
            {
                if (m_Wrapper.m_KulickaOvladaniActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IKulickaOvladaniActions instance)
            {
                foreach (var item in m_Wrapper.m_KulickaOvladaniActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_KulickaOvladaniActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public KulickaOvladaniActions @KulickaOvladani => new KulickaOvladaniActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        public interface IKulickaOvladaniActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
    }
}
